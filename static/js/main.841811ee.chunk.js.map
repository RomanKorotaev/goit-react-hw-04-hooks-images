{"version":3,"sources":["components/Modal/Modal.module.css","components/ImageGallery/ImageGallery.module.css","components/ImageGalleryItem/ImageGalleryItem.module.css","components/Button/Button.module.css","App.module.css","js/apiService.js","components/Searchbar/SearchbarHooks.js","components/ImageGalleryItem/ImageGalleryItemHooks.js","components/ImageGallery/ImageGalleryHooks.js","components/Button/ButtonHooks.js","components/Modal/ModalHooks.js","AppHooks.js","reportWebVitals.js","index.js","components/Searchbar/Searchbar.module.css"],"names":["module","exports","ImageApiService","this","searchQuery","page","fetch","then","response","json","data","hits","catch","error","console","log","newQuery","Searchbarhooks","onFormSubmit","useState","quiryWord","setQuiryWord","className","s","Searchbar","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","onSubmit","event","preventDefault","trim","toast","progress","undefined","SearchForm","type","SearchFormButton","style","width","height","SearchFormButtonLabel","SearchFormInput","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","ImageGalleryItemHooks","webformatURL","largeImageURL","id","tags","onImgClickImageGalleryItem","largeImageURLItem","idItem","src","alt","ImageGalleryItemImage","onClick","ImageGalleryHooks","imagesArray","onImgClick","onImgClickImageGallery","useCallback","ImageGallery","map","ButtonHooks","onLoadMoreBtn","Button","window","scrollTo","top","document","documentElement","scrollHeight","behavior","modalRoot","querySelector","Modalhooks","onModalClose","children","useEffect","addEventListener","handleKeyDown","removeEventListener","code","handleOverleyClick","target","createPortal","Overlay","Modal","imageApiService","AppHooks","setImagesArray","setLargeImageURL","status","setStatus","showModal","setShowModal","resetPage","query","setTimeout","fetchImages","length","success","info","err","alert","handleSummitForm","toggleModal","SearchbarHooks","color","incerementPage","prevState","rejected","ModalHooks","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","getElementById"],"mappings":"wIACAA,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,uB,mBCA3DD,EAAOC,QAAU,CAAC,aAAe,qC,mBCAjCD,EAAOC,QAAU,CAAC,sBAAwB,kD,mBCA1CD,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,IAAM,mB,qJC0CTC,E,WApCV,aAAe,oBACZC,KAAKC,YAAc,GAClBD,KAAKE,KAAO,E,+CAIhB,WACO,OAAOC,MAAM,WAAD,OAZP,kBAYO,uDAAmEH,KAAKC,YAAxE,iBAA4FD,KAAKE,KAAjG,4BAbR,qCAaQ,MACHE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,OAAQA,EAAKC,QAEhBC,OAAO,SAAAC,GACJC,QAAQC,IAAK,oMAA0CF,Q,iBAK1E,WACI,OAAOV,KAAKC,a,IAGhB,SAAUY,GACNb,KAAKC,YAAcY,I,4BAGvB,WACIb,KAAKE,MAAQ,I,uBAGjB,WACIF,KAAKE,KAAO,M,oCCsDNY,MArFf,YAA2C,IAAhBC,EAAe,EAAfA,aAEvB,EAAkCC,mBAAU,IAA5C,mBAAOC,EAAP,KAAkBC,EAAlB,KA6CE,OACE,yBAAQC,UAAWC,IAAEC,UAArB,UAER,cAAC,IAAD,CACUC,SAAS,YACTC,UAAW,KACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,IAGV,uBAAMC,SA1CS,SAAAC,GACnBA,EAAMC,iBAGmB,KAArBhB,EAAUiB,QAgBdnB,EAAaE,GAEbC,EAAc,KAfdiB,IAAMzB,MAAM,oIAA6B,CACvCY,SAAU,YACVC,UAAW,KACXC,iBAAiB,EACjBE,cAAc,EACdI,cAAc,EACdD,WAAW,EACXO,cAAUC,KA4BuBlB,UAAWC,IAAEkB,WAA5C,UAEI,yBAAQC,KAAK,SAASpB,UAAWC,IAAEoB,iBAAnC,UACE,cAAC,IAAD,CAAUC,MAAO,CAACC,MAAO,GAAIC,OAAQ,MACvC,sBAAMxB,UAAWC,IAAEwB,sBAAnB,uBAGA,uBACAzB,UAAWC,IAAEyB,gBACbN,KAAK,OACLO,aAAa,MACbC,WAAS,EACTC,YAAY,2BACZC,MAAOhC,EACPiC,SAjEgB,SAAAlB,GACxBd,EAAec,EAAMmB,cAAcF,MAAMG,eAEzCzC,QAAQC,IAAK,gMAAyEK,a,kCCa/EoC,MA9Bf,YAAyG,IAAvEC,EAAsE,EAAtEA,aAAcC,EAAwD,EAAxDA,cAAeC,EAAyC,EAAzCA,GAAIC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,2BAErE,EAAgD1C,mBAAU,IAA1D,mBACA,GADA,UACkDA,mBAAUuC,IAA5D,mBAAOI,EAAP,KACA,GADA,KACgC3C,mBAAU,KAA1C,mBACA,GADA,UAC4BA,mBAAUwC,IAAtC,mBAAOI,EAAP,KAOA,OAPA,KAQI,qBACIC,IAAKP,EACLQ,IAAKL,EACLtC,UAAWC,IAAE2C,sBACbC,QAVa,SAAAhC,GACjBrB,QAAQC,IAAK,gMAAoEoB,GACjF0B,EAA2BC,IASvBH,GAAII,KCsBDK,MArCf,YAAyD,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,WAEvBC,EAAyBC,uBAAc,SAAAd,GAC7C5C,QAAQC,IAAK,4QAAwG2C,GACrHY,EAAWZ,KAAkB,IAIjC,OACE,oBAAIpC,UAAWC,IAAEkD,aAAjB,SACEJ,EAAYK,KAAI,gBAAEf,EAAF,EAAEA,GAAIF,EAAN,EAAMA,aAAcC,EAApB,EAAoBA,cAAeE,EAAnC,EAAmCA,KAAnC,OAChB,6BACI,cAAC,EAAD,CACEH,aAAcA,EACdC,cAAeA,EACfE,KAAMA,EACND,GAAKA,EACLE,2BAA8BU,KANxBZ,S,iBCsBXgB,MApCf,YAA2C,IAAlBC,EAAiB,EAAjBA,cAuBrB,OACI,wBAAQtD,UAAWC,IAAEsD,OACjBV,QAbmB,SAAAhC,GACnBrB,QAAQC,IAAK,6RAAuEoB,GACxFyC,IAEQE,OAAOC,SAAS,CACZC,IAAKC,SAASC,gBAAgBC,aAC9BC,SAAU,YAMtB,yB,iBCvBFC,EAAYJ,SAASK,cAAe,eAwD3BC,MAtDf,YAAgD,IAA1BC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,SAEhCC,qBAAY,WAIR,OAHAZ,OAAOa,iBAAkB,UAAWC,GACpC9E,QAAQC,IAAK,oKAEN,WACH+D,OAAOe,oBAAoB,UAAWD,GACtC9E,QAAQC,IAAK,mJAElB,IAEG,IAAM6E,EAAgBpB,uBAAc,SAAArC,GAClCrB,QAAQC,IAAK,gBAAiBoB,EAAM2D,MAEnB,WAAb3D,EAAM2D,OACNhF,QAAQC,IAAK,+OACbyE,OAEL,IAEKO,EAAqBvB,uBAAc,SAAArC,GAEnCA,EAAM6D,SAAS7D,EAAMmB,gBACvBxC,QAAQC,IAAK,uSACbyE,OAED,IAEH,OAAQS,uBACN,qBAAK3E,UAAYC,IAAE2E,QAAS/B,QAAS4B,EAArC,SACI,qBAAKzE,UAAWC,IAAE4E,MAAlB,SAOGV,MAICJ,I,iBCrCde,EAAkB,IAAIlG,EA0LZmG,MAvLf,WACI,MAAuClF,mBAAU,IAAjD,mBAAQkD,EAAR,KAAqBiC,EAArB,KACA,EAAmCnF,mBAAU,IAA7C,mBAAQC,EAAR,KAAmBC,EAAnB,KACA,EAA2CF,mBAAU,IAArD,mBAAQuC,EAAR,KAAuB6C,EAAvB,KAEA,EAA4BpF,mBAAU,QAAtC,mBAAOqF,EAAP,KAAeC,EAAf,KAEA,EAAmCtF,oBAAU,GAA7C,mBAAQuF,EAAR,KAAmBC,EAAnB,KAGCjB,qBAAY,WACa,KAAdtE,GAGKN,QAAQC,IAAK,cAAgBK,GAKjDgF,EAAgBQ,YAChBR,EAAgBS,MAAQzF,EAGxBqF,EAAW,WAEXK,YAAW,WACPV,EAAgBW,cACfxG,MAAM,SAAAI,GAEGA,EAAKqG,OAAS,GAChBV,EAAc,YAAO3F,IACrBG,QAAQC,IAAK,oMAA6EsD,GAC1FoC,EAAW,YAETnE,IAAM2E,QAAQ,WAAY,CACxBxF,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBE,cAAc,EACdI,cAAc,EACdD,WAAW,EACXO,cAAUC,MAGd1B,QAAQC,IAAK,sNACb0F,EAAW,QAEXnE,IAAM4E,KAAK,qNAA4C,CACrDzF,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBE,cAAc,EACdI,cAAc,EACdD,WAAW,EACXO,cAAUC,QAKnB5B,OAAM,SAAAuG,GAIH,OAHFrG,QAAQC,IAAK,SAAUoG,GACrBV,EAAW,YACXW,MAAM,oBACCD,OAEV,MArDOrG,QAAQC,IAAK,6FAsDxB,CAACK,IAGJN,QAAQC,IAAK,8KAAuDsD,GAE9D,IAAMgD,EAAmB,SAAAjG,GACvBN,QAAQC,IAAI,0HAAqDK,GACjEC,EAAcD,IAgDVkG,EAAc,WAClBX,GAAeD,IAItB,MAAa,SAATF,EACO,cAACe,EAAD,CAAgBrG,aAAemG,IAE1B,YAATb,EAEA,qCACE,cAACe,EAAD,CAAgBrG,aAAemG,IAC7B,cAAC,IAAD,CACQ/F,UAAU,SACVoB,KAAK,UACL8E,MAAM,UACN1E,OAAQ,IACRD,MAAO,SAId,aAAT2D,EAEA,qCACK,cAAC,IAAD,CACG/E,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,IAGlB,cAACsF,EAAD,CAAgBrG,aAAemG,IAG/B,cAAC,EAAD,CACAhD,YAAcA,EACbC,WA9CwB,SAACZ,GACxB6C,EAAkB7C,GAClB4D,OA8CF,cAAC,EAAD,CAAa1C,cArFU,WACrB9D,QAAQC,IAAI,uOAEZD,QAAQC,IAAI,8LAAyCqF,EAAgBS,OAEjET,EAAgBqB,iBAEhBrB,EAAgBW,cACfxG,MAAM,SAAAI,GACe,IAAhBA,EAAKqG,SAEHV,GAAiB,SAACoB,GAAD,4BAAmBA,GAAnB,YAAiC/G,OAClDG,QAAQC,IAAK,4LAAwCsD,GACrDoC,EAAW,YAEXnE,IAAM2E,QAAQ,WAAY,CAClBxF,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBE,cAAc,EACdI,cAAc,EACdD,WAAW,EACXO,cAAUC,KAIxBsC,OAAOC,SAAS,CACNC,IAAKC,SAASC,gBAAgBC,aAC9BC,SAAU,cAGrBxE,OAAO,SAAA+G,GACN7G,QAAQC,IAAK,iOAA8C4G,GAC3DlB,EAAW,kBAsDjBC,GAAa,cAACkB,EAAD,CAAYpC,aAAc8B,EAA1B,SACV,qBAAKtD,IAAKN,EAAeO,IAAI,iBAM3B,aAATuC,EACM,qCACT,cAACe,EAAD,CAAgBrG,aAAemG,IAC9B,4BAAG,oFAHL,GChLeQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxH,MAAK,YAAkD,IAA/CyH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,iBCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,CAAUjH,UAAWC,IAAEiH,QAEzBvD,SAASwD,eAAe,SAM1BZ,K,kBClBA7H,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,iBAAmB,oCAAoC,sBAAwB,yCAAyC,gBAAkB,sC","file":"static/js/main.841811ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__30c9O\",\"Modal\":\"Modal_Modal__1kvyf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGallery\":\"ImageGallery_ImageGallery__Q00hX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGalleryItemImage\":\"ImageGalleryItem_ImageGalleryItemImage__1lSHd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__ZPs9J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2ixVL\"};","\r\nconst KEY_API = '23193680-1d95b6a7ab6e160162f942df5'\r\nconst BASE_URL = 'pixabay.com/api'\r\n\r\n\r\n class ImageApiService {\r\n\r\n     constructor() {\r\n        this.searchQuery = '';\r\n         this.page = 1;\r\n    };\r\n    \r\n     \r\n     fetchImages() {\r\n            return fetch(`https://${BASE_URL}/?image_type=photo&orientation=horizontal&q=${this.searchQuery}&page=${this.page}&per_page=12&key=${KEY_API} `)\r\n                    .then(response => response.json())\r\n                    .then(data => {\r\n                        return  data.hits;\r\n                    })\r\n                    .catch (error  => {\r\n                        console.log (\"Произошла ошибка в ответе от бекенда: \", error)\r\n                    });\r\n    } \r\n\r\n\r\n     get query() {\r\n         return this.searchQuery;\r\n     }\r\n     \r\n     set query(newQuery) {\r\n         this.searchQuery = newQuery;\r\n     }\r\n\r\n     incerementPage() {\r\n         this.page += 1;\r\n      }\r\n\r\n     resetPage() {\r\n         this.page = 1;\r\n     }\r\n\r\n}\r\n \r\nexport default ImageApiService;","import React, {useState, useCallback} from 'react';\r\nimport s from './Searchbar.module.css'\r\nimport { ToastContainer , toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { ImSearch } from \"react-icons/im\";\r\n\r\nfunction Searchbarhooks ( {onFormSubmit}) {\r\n\r\n    const [quiryWord, setQuiryWord] = useState ('')\r\n\r\n\r\n      // const handleQueryChange = useCallback (event => {\r\n      //   setQuiryWord ( event.currentTarget.value.toLowerCase() );\r\n       \r\n      //   console.log ('Сработала функция handleQueryChange с применением хука оптимизации useCallback. Значение this.state.quiryWord :', quiryWord)\r\n      // }, [])\r\n\r\n      const handleQueryChange = event => {\r\n        setQuiryWord ( event.currentTarget.value.toLowerCase() );\r\n       \r\n        console.log ('Сработала функция handleQueryChange . Значение this.state.quiryWord :', quiryWord)\r\n      };\r\n\r\n\r\n\r\n\r\n      const handleSubmit = event => {\r\n        event.preventDefault(); //сбрасываем перезагрузку по умолчанию при сабмите формы\r\n    \r\n        // Проверяем не пустая ли строка в инпуте\r\n        if (quiryWord.trim() === '') {\r\n        // alert (\"Введите поисковое слово!\");\r\n\r\n        toast.error(\"Введите поисковое слово!\",  {\r\n          position: \"top-right\",\r\n          autoClose: 2500,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          })\r\n\r\n          return;\r\n        }\r\n    \r\n        onFormSubmit(quiryWord);\r\n       \r\n        setQuiryWord (\"\"); //делаем сброс поискового слова после сабмита формы (для новых вводов)\r\n      };\r\n\r\n\r\n     \r\n      return (\r\n        <header className={s.Searchbar}>\r\n\r\n<ToastContainer \r\n          position=\"top-right\"\r\n          autoClose={2500}\r\n          hideProgressBar={false}\r\n          newestOnTop={false}\r\n          closeOnClick\r\n          rtl={false}\r\n          pauseOnFocusLoss\r\n          draggable\r\n          pauseOnHover\r\n        />\r\n\r\n            <form onSubmit={handleSubmit}  className={s.SearchForm}>\r\n\r\n                <button type=\"submit\" className={s.SearchFormButton}>\r\n                  <ImSearch style={{width: 25, height: 25 }}/>\r\n                <span className={s.SearchFormButtonLabel}>Search</span>\r\n                </button>\r\n\r\n                <input\r\n                className={s.SearchFormInput}\r\n                type=\"text\"\r\n                autoComplete=\"off\"\r\n                autoFocus\r\n                placeholder=\"Search images and photos\"\r\n                value={quiryWord}\r\n                onChange ={handleQueryChange}\r\n                />\r\n\r\n            </form>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Searchbarhooks;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ImageGalleryItem.module.css'\r\n\r\nfunction ImageGalleryItemHooks ( {webformatURL, largeImageURL, id, tags, onImgClickImageGalleryItem } ) {\r\n\r\n    const [webformatURLItem, setWebformatURLItem] = useState (\"\");\r\n    const [largeImageURLItem, setLargeImageURLItem] = useState (largeImageURL);\r\n    const [tagsItem, setTagsItem] = useState (\"\");\r\n    const [idItem, setIdItem] = useState (id);\r\n\r\n    const onImageClick = event=> { \r\n        console.log ('Сработала функция onImgClickImageGalleryItem. Клинули на  Img . ', event);\r\n        onImgClickImageGalleryItem(largeImageURLItem);\r\n    }\r\n\r\n    return (\r\n        <img \r\n            src={webformatURL}\r\n            alt={tags}\r\n            className={s.ImageGalleryItemImage}\r\n            onClick = {onImageClick}\r\n            id={idItem}/>\r\n        )\r\n}\r\n\r\nImageGalleryItemHooks.propTypes = {\r\n    webformatURL: PropTypes.string.isRequired,\r\n    largeImageURL: PropTypes.string.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n    tags: PropTypes.string.isRequired,\r\n    onImgClickImageGalleryItem: PropTypes.func.isRequired\r\n  };\r\n\r\nexport default ImageGalleryItemHooks;","import React, { useCallback }  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ImageGallery.module.css';\r\n\r\n\r\nimport ImageGalleryItemHooks from  '../ImageGalleryItem/ImageGalleryItemHooks'\r\n\r\nfunction ImageGalleryHooks ( {imagesArray, onImgClick} ){\r\n\r\n              const onImgClickImageGallery = useCallback ( largeImageURL => {\r\n              console.log ('Сработала функция onImgClickImageGallery через хук useCallback. Клинули на  Img   . largeImageURL = ', largeImageURL);\r\n              onImgClick(largeImageURL) }, [] )\r\n          \r\n\r\n\r\n          return (\r\n            <ul className={s.ImageGallery}>\r\n            { imagesArray.map(({id, webformatURL, largeImageURL, tags }) => (\r\n              <li  key = {id}>\r\n                  <ImageGalleryItemHooks \r\n                    webformatURL={webformatURL}\r\n                    largeImageURL={largeImageURL}\r\n                    tags={tags}\r\n                    id= {id}\r\n                    onImgClickImageGalleryItem = {onImgClickImageGallery}\r\n                    />\r\n              </li>\r\n          ))}\r\n             </ul>\r\n        )    \r\n}\r\n\r\nImageGalleryHooks.propTypes = {\r\n  imagesArray: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      webformatURL: PropTypes.string.isRequired,\r\n      largeImageURL: PropTypes.string.isRequired,\r\n      tags: PropTypes.string,\r\n    })\r\n  ),\r\n  onImgClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ImageGalleryHooks;","import React,  { useCallback }  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Button.module.css'\r\n\r\nfunction ButtonHooks ( { onLoadMoreBtn }) {\r\n\r\n    //    const handleClickBtn = useCallback ( (event) => {\r\n    //     console.log ('Сработала функция handleClickBtn с применением хука оптимизации useCallback.  Клинули на кнопке Загрузить ещё ', event);\r\n    //     onLoadMoreBtn();\r\n    //             // Прокрутка страницы вниз до кнопки Load more\r\n    //             window.scrollTo({\r\n    //                 top: document.documentElement.scrollHeight,\r\n    //                 behavior: 'smooth',\r\n    //             })     \r\n    //     }, [])\r\n\r\n        const handleClickBtn = event => {\r\n            console.log ('Сработала функция handleClickBtn.  Клинули на кнопке Загрузить ещё ', event);\r\n        onLoadMoreBtn();\r\n                // Прокрутка страницы вниз до кнопки Load more\r\n                window.scrollTo({\r\n                    top: document.documentElement.scrollHeight,\r\n                    behavior: 'smooth',\r\n                }) \r\n        }\r\n\r\n\r\n    return (\r\n        <button className={s.Button}\r\n            onClick = {handleClickBtn}\r\n        > Load more</button>\r\n  \r\n    )\r\n\r\n}\r\n\r\nButtonHooks.propTypes = {\r\n    onLoadMoreBtn: PropTypes.func.isRequired\r\n  };\r\n\r\nexport default ButtonHooks;","import PropTypes from 'prop-types';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport {createPortal} from 'react-dom'\r\nimport s from './Modal.module.css'\r\n\r\nconst modalRoot = document.querySelector ('#modal-root')\r\n\r\nfunction Modalhooks ({onModalClose, children}) {\r\n\r\n    useEffect ( ()=> {\r\n        window.addEventListener ('keydown', handleKeyDown);\r\n        console.log (\" Сработал useEffect как аналог  componentDidMount() - 1 раз \")\r\n        \r\n        return ()=> {\r\n            window.removeEventListener('keydown', handleKeyDown)\r\n            console.log (\" Сработал useEffect как аналог  componentWillUnmount() \")\r\n        }\r\n    }, []) \r\n\r\n          const handleKeyDown = useCallback ( event => {\r\n            console.log (\"event.code = \", event.code );\r\n            \r\n            if (event.code==='Escape') {\r\n                console.log (\"Нажали Escape.  Использовали хук для оптимизации useCallback\")\r\n                onModalClose() \r\n              } \r\n        }, [])\r\n\r\n          const handleOverleyClick = useCallback ( event => {\r\n            // Проверяем, чтобы кликнули действительно по бекдропу/оверлею и не прокликивался насквозь контент перед бекдропом\r\n            if (event.target===event.currentTarget) {\r\n              console.log (\"Кликнули в бекдроп!!! Использовали хук для оптимизации useCallback\")\r\n              onModalClose();\r\n            }\r\n          }, [])\r\n\r\n          return  createPortal (\r\n            <div className= {s.Overlay} onClick={handleOverleyClick}>\r\n                <div className={s.Modal}>\r\n            \r\n                    {/* Внимание! Если содержимое модалки будем передавать не как отдельный проп для готовой разметки (тег img),\r\n                  а как this.props.children, то сможем переиспользовать модалку, как обычный контейнер для любого содержимого */}\r\n                  \r\n                  {/* {this.props.children} */}\r\n                 \r\n                  {children}\r\n\r\n                  {/* <img src={this.props.largeImageURL} alt=\"\" /> */}\r\n              </div>\r\n            </div>, modalRoot\r\n          )\r\n\r\n\r\n\r\n}\r\n\r\nModalhooks.propTypes = {\r\n  onModalClose: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nexport default Modalhooks; ","import React, {useState, useEffect} from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport ImageApiService from './js/apiService'\r\nimport SearchbarHooks from './components/Searchbar/SearchbarHooks'\r\nimport ImageGalleryHooks from './components/ImageGallery/ImageGalleryHooks'\r\nimport ButtonHooks from './components/Button/ButtonHooks'\r\nimport ModalHooks from './components/Modal/ModalHooks'\r\nimport Loader from \"react-loader-spinner\";\r\n\r\n\r\nconst imageApiService = new ImageApiService();\r\n\r\n\r\n function AppHooks () {\r\n     const [ imagesArray, setImagesArray] = useState ([]);\r\n     const [ quiryWord, setQuiryWord] = useState (\"\");\r\n     const [ largeImageURL, setLargeImageURL] = useState (\"\");\r\n\r\n     const [status, setStatus] = useState( 'idel');\r\n\r\n     const [ showModal, setShowModal] = useState (false);\r\n   \r\n// Обновление компонента: поиск по заданному слову\r\n      useEffect ( ()=> {   \r\n              if(quiryWord === \"\") {\r\n              console.log (\"quiryWord === пустая строка\")\r\n              return;\r\n            } else {  console.log (\"quiryWord =\",  quiryWord) }\r\n  ////---------------------   \r\n\r\n\r\n\r\n  imageApiService.resetPage(); // перед каждым новым запросом сбрасываем на 1 (первая в числе пагинации с бекенда)\r\n  imageApiService.query = quiryWord; // обновляем значение поискового слова\r\n\r\n \r\n  setStatus ('panding')\r\n\r\n  setTimeout(() => {\r\n      imageApiService.fetchImages()\r\n      .then (hits=>{\r\n            // Перед записью данных в state  проверяем не пустой ли массив с полученными данными\r\n            if (hits.length > 1) { \r\n              setImagesArray ( [...hits ] ) // ВАЖНО СИНТАКСИС: именно так в данной функции записываем массив\r\n              console.log (\" Записали hits  в   - imagesArray через хуки (аналог componentDidUpdate )\", imagesArray );\r\n              setStatus ('resolved');\r\n\r\n                toast.success('Success!', {\r\n                  position: \"top-right\",\r\n                  autoClose: 4000,\r\n                  hideProgressBar: false,\r\n                  closeOnClick: true,\r\n                  pauseOnHover: true,\r\n                  draggable: true,\r\n                  progress: undefined,\r\n              });  \r\n            } else { \r\n              console.log (\"Нет картинок по такому поисковому слову!\");\r\n              setStatus ('idel');\r\n\r\n              toast.info('Нет картинок по такому поисковому слову!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n\r\n            }\r\n      })\r\n      .catch(err => {\r\n        console.log (\"err : \", err)\r\n          setStatus ('rejected')\r\n          alert(\"Something wrong!\");\r\n          return err;\r\n        });\r\n    }, 1000);                    \r\n}, [quiryWord] )\r\n\r\n\r\nconsole.log (\"imagesArray после срабатівания функции  useEffect :\", imagesArray)\r\n\r\n      const handleSummitForm = quiryWord => {\r\n        console.log(\"Вызвана функция handleSummitForm = (quiryWord) : \", quiryWord);\r\n        setQuiryWord (quiryWord) ;\r\n        \r\n      }\r\n\r\n\r\n  // ------------------ Загрузить ещё  ------------------\r\n      const handleLoadMore = () => {\r\n        console.log(\" Сработала функция handleLoadMore - КНОПКА ЗАГРУЗИТЬ ЕЩЁ \");\r\n      \r\n        console.log(\"Значение поискового слова в классе : \", imageApiService.query)\r\n       \r\n            imageApiService.incerementPage();\r\n      \r\n            imageApiService.fetchImages()\r\n            .then (hits=>{\r\n              if (hits.length !== 0) {\r\n                  // Обновляем предыдущее состояние массива данных и дописываем новые элементы\r\n                    setImagesArray ( (prevState) => [...prevState, ...hits]);\r\n                    console.log (\"Запись массива через  ЗАГРУЗИТЬ ЕЩЁ\" , imagesArray)\r\n                    setStatus ('resolved');\r\n                       \r\n                    toast.success('Success!', {\r\n                            position: \"top-right\",\r\n                            autoClose: 3000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        });                \r\n              }   \r\n      \r\n              window.scrollTo({\r\n                        top: document.documentElement.scrollHeight,\r\n                        behavior: 'smooth',\r\n                      });\r\n            })\r\n            .catch (rejected => {\r\n              console.log (\"Ошибка при нажатии на кнопку ЗАГРУЗИТЬ ЕЩЁ\", rejected)\r\n              setStatus ('rejected')\r\n            });   \r\n      }\r\n\r\n      const handleOnImgClick = (largeImageURL) => {\r\n        setLargeImageURL (largeImageURL)\r\n        toggleModal();\r\n      }\r\n     \r\n      const toggleModal = ()=> {\r\n        setShowModal (!showModal)\r\n      }\r\n\r\n      // ----------------- Рендеринг в зависимости от статуса  -----------------\r\n if (status==='idel') {\r\n    return  <SearchbarHooks onFormSubmit= {handleSummitForm}/> }\r\n\r\n    if (status==='panding') {\r\n      return (\r\n        <>\r\n          <SearchbarHooks onFormSubmit= {handleSummitForm}/>\r\n            <Loader\r\n                    className=\"Loader\"\r\n                    type=\"Circles\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                  /> \r\n        </>)}\r\n\r\nif (status==='resolved') {\r\n  return (\r\n    <>\r\n         <ToastContainer\r\n            position=\"top-right\"\r\n            autoClose={3000}\r\n            hideProgressBar={false}\r\n            newestOnTop={false}\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnFocusLoss\r\n            draggable\r\n            pauseOnHover\r\n          />\r\n\r\n      <SearchbarHooks onFormSubmit= {handleSummitForm}/>\r\n\r\n\r\n      <ImageGalleryHooks\r\n      imagesArray= {imagesArray}\r\n       onImgClick = {handleOnImgClick}/> \r\n\r\n      <ButtonHooks onLoadMoreBtn = {handleLoadMore}/>    \r\n\r\n      { showModal && <ModalHooks onModalClose={toggleModal}>\r\n           <img src={largeImageURL} alt=\"picture\" />\r\n         </ModalHooks> }  \r\n\r\n    </>)}\r\n\r\n\r\nif (status==='rejected') {\r\n  return  <>\r\n <SearchbarHooks onFormSubmit= {handleSummitForm}/>\r\n  <p><b>Oooops! Thomething wrong! Try againe! :( </b></p> \r\n  </>}\r\n  \r\n  \r\n}\r\n\r\n\r\nexport default  AppHooks;\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppHooks from './AppHooks'\nimport reportWebVitals from './reportWebVitals';\n\nimport s from './App.module.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App className={s.App}/> */}\n    <AppHooks className={s.App}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__U53BZ\",\"SearchForm\":\"Searchbar_SearchForm__1cANf\",\"SearchFormButton\":\"Searchbar_SearchFormButton__1y0XH\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__G5QW5\",\"SearchFormInput\":\"Searchbar_SearchFormInput__31wbT\"};"],"sourceRoot":""}